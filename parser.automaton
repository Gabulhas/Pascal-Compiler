State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On PROGRAM shift to state 1
-- On program shift to state 124
## Reductions:

State 1:
## Known stack suffix:
## PROGRAM
## LR(1) items:
program -> PROGRAM . PSTRING block EOF [ # ]
## Transitions:
-- On PSTRING shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## PROGRAM PSTRING
## LR(1) items:
program -> PROGRAM PSTRING . block EOF [ # ]
## Transitions:
-- On VAR shift to state 3
-- On opt_variable_declaration_list shift to state 21
-- On block shift to state 122
## Reductions:
-- On BEGIN
--   reduce production opt_variable_declaration_list ->

State 3:
## Known stack suffix:
## VAR
## LR(1) items:
opt_variable_declaration_list -> VAR . variable_declaration_list [ BEGIN ]
## Transitions:
-- On IDE shift to state 4
-- On variable_field shift to state 5
-- On variable_declaration_list shift to state 20
-- On separated_nonempty_list(COMMA,ide) shift to state 7
-- On ide shift to state 17
## Reductions:

State 4:
## Known stack suffix:
## IDE
## LR(1) items:
ide -> IDE . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LS LP LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA COLON ASSIGN AND ]
## Transitions:
## Reductions:
-- On TO TIMES SEMICOLON RS RP PLUS OR MINUS LS LP LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA COLON ASSIGN AND
--   reduce production ide -> IDE

State 5:
## Known stack suffix:
## variable_field
## LR(1) items:
variable_declaration_list -> variable_field . [ BEGIN ]
variable_declaration_list -> variable_field . variable_declaration_list [ BEGIN ]
## Transitions:
-- On IDE shift to state 4
-- On variable_field shift to state 5
-- On variable_declaration_list shift to state 6
-- On separated_nonempty_list(COMMA,ide) shift to state 7
-- On ide shift to state 17
## Reductions:
-- On BEGIN
--   reduce production variable_declaration_list -> variable_field

State 6:
## Known stack suffix:
## variable_field variable_declaration_list
## LR(1) items:
variable_declaration_list -> variable_field variable_declaration_list . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production variable_declaration_list -> variable_field variable_declaration_list

State 7:
## Known stack suffix:
## separated_nonempty_list(COMMA,ide)
## LR(1) items:
variable_field -> separated_nonempty_list(COMMA,ide) . COLON ptype SEMICOLON [ IDE BEGIN ]
## Transitions:
-- On COLON shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## separated_nonempty_list(COMMA,ide) COLON
## LR(1) items:
variable_field -> separated_nonempty_list(COMMA,ide) COLON . ptype SEMICOLON [ IDE BEGIN ]
## Transitions:
-- On TSTRING shift to state 9
-- On TREAL shift to state 10
-- On TINT shift to state 11
-- On TCHAR shift to state 12
-- On TBOOLEAN shift to state 13
-- On stype shift to state 14
-- On ptype shift to state 15
## Reductions:

State 9:
## Known stack suffix:
## TSTRING
## LR(1) items:
stype -> TSTRING . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production stype -> TSTRING

State 10:
## Known stack suffix:
## TREAL
## LR(1) items:
stype -> TREAL . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production stype -> TREAL

State 11:
## Known stack suffix:
## TINT
## LR(1) items:
stype -> TINT . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production stype -> TINT

State 12:
## Known stack suffix:
## TCHAR
## LR(1) items:
stype -> TCHAR . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production stype -> TCHAR

State 13:
## Known stack suffix:
## TBOOLEAN
## LR(1) items:
stype -> TBOOLEAN . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production stype -> TBOOLEAN

State 14:
## Known stack suffix:
## stype
## LR(1) items:
ptype -> stype . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production ptype -> stype

State 15:
## Known stack suffix:
## separated_nonempty_list(COMMA,ide) COLON ptype
## LR(1) items:
variable_field -> separated_nonempty_list(COMMA,ide) COLON ptype . SEMICOLON [ IDE BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## separated_nonempty_list(COMMA,ide) COLON ptype SEMICOLON
## LR(1) items:
variable_field -> separated_nonempty_list(COMMA,ide) COLON ptype SEMICOLON . [ IDE BEGIN ]
## Transitions:
## Reductions:
-- On IDE BEGIN
--   reduce production variable_field -> separated_nonempty_list(COMMA,ide) COLON ptype SEMICOLON

State 17:
## Known stack suffix:
## ide
## LR(1) items:
separated_nonempty_list(COMMA,ide) -> ide . [ COLON ]
separated_nonempty_list(COMMA,ide) -> ide . COMMA separated_nonempty_list(COMMA,ide) [ COLON ]
## Transitions:
-- On COMMA shift to state 18
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,ide) -> ide

State 18:
## Known stack suffix:
## ide COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ide) -> ide COMMA . separated_nonempty_list(COMMA,ide) [ COLON ]
## Transitions:
-- On IDE shift to state 4
-- On separated_nonempty_list(COMMA,ide) shift to state 19
-- On ide shift to state 17
## Reductions:

State 19:
## Known stack suffix:
## ide COMMA separated_nonempty_list(COMMA,ide)
## LR(1) items:
separated_nonempty_list(COMMA,ide) -> ide COMMA separated_nonempty_list(COMMA,ide) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,ide) -> ide COMMA separated_nonempty_list(COMMA,ide)

State 20:
## Known stack suffix:
## VAR variable_declaration_list
## LR(1) items:
opt_variable_declaration_list -> VAR variable_declaration_list . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production opt_variable_declaration_list -> VAR variable_declaration_list

State 21:
## Known stack suffix:
## opt_variable_declaration_list
## LR(1) items:
block -> opt_variable_declaration_list . statement_part [ EOF ]
## Transitions:
-- On BEGIN shift to state 22
-- On statement_part shift to state 121
## Reductions:

State 22:
## Known stack suffix:
## BEGIN
## LR(1) items:
statement_part -> BEGIN . statement_list END DOT [ EOF ]
## Transitions:
-- On WRITE shift to state 23
-- On WHILE shift to state 74
-- On READ shift to state 77
-- On IF shift to state 86
-- On IDE shift to state 4
-- On FOR shift to state 91
-- On BEGIN shift to state 98
-- On variable shift to state 99
-- On statement_list shift to state 118
-- On statement shift to state 106
-- On ide shift to state 108
## Reductions:

State 23:
## Known stack suffix:
## WRITE
## LR(1) items:
statement -> WRITE . LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On LP shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## WRITE LP
## LR(1) items:
statement -> WRITE LP . loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On PSTRING shift to state 27
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On separated_nonempty_list(COMMA,exp) shift to state 64
-- On miscexp shift to state 65
-- On loption(separated_nonempty_list(COMMA,exp)) shift to state 66
-- On ide shift to state 32
-- On exp shift to state 69
-- On booleanexp shift to state 72
-- On arithexp shift to state 73
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,exp)) ->

State 25:
## Known stack suffix:
## TRUE
## LR(1) items:
booleanexp -> TRUE . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> TRUE

State 26:
## Known stack suffix:
## REAL
## LR(1) items:
arithexp -> REAL . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
## Reductions:
-- On TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND
--   reduce production arithexp -> REAL

State 27:
## Known stack suffix:
## PSTRING
## LR(1) items:
miscexp -> PSTRING . [ SEMICOLON RP COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RP COMMA
--   reduce production miscexp -> PSTRING

State 28:
## Known stack suffix:
## NOT
## LR(1) items:
booleanexp -> NOT . booleanexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On ide shift to state 32
-- On booleanexp shift to state 63
-- On arithexp shift to state 39
## Reductions:

State 29:
## Known stack suffix:
## LP
## LR(1) items:
arithexp -> LP . arithexp RP [ TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA ]
booleanexp -> LP . booleanexp RP [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On ide shift to state 32
-- On booleanexp shift to state 33
-- On arithexp shift to state 62
## Reductions:

State 30:
## Known stack suffix:
## INT
## LR(1) items:
arithexp -> INT . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
## Reductions:
-- On TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND
--   reduce production arithexp -> INT

State 31:
## Known stack suffix:
## FALSE
## LR(1) items:
booleanexp -> FALSE . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> FALSE

State 32:
## Known stack suffix:
## ide
## LR(1) items:
arithexp -> ide . [ TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA ]
booleanexp -> ide . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA
--   reduce production arithexp -> ide
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> ide
** Conflict on SEMICOLON RP COMMA

State 33:
## Known stack suffix:
## LP booleanexp
## LR(1) items:
booleanexp -> booleanexp . AND booleanexp [ RP OR AND ]
booleanexp -> booleanexp . OR booleanexp [ RP OR AND ]
booleanexp -> LP booleanexp . RP [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On RP shift to state 34
-- On OR shift to state 35
-- On AND shift to state 37
## Reductions:

State 34:
## Known stack suffix:
## LP booleanexp RP
## LR(1) items:
booleanexp -> LP booleanexp RP . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> LP booleanexp RP

State 35:
## Known stack suffix:
## booleanexp OR
## LR(1) items:
booleanexp -> booleanexp OR . booleanexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On ide shift to state 32
-- On booleanexp shift to state 36
-- On arithexp shift to state 39
## Reductions:

State 36:
## Known stack suffix:
## booleanexp OR booleanexp
## LR(1) items:
booleanexp -> booleanexp . AND booleanexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> booleanexp . OR booleanexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> booleanexp OR booleanexp . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On AND shift to state 37
## Reductions:
-- On SEMICOLON RP OR DO COMMA
--   reduce production booleanexp -> booleanexp OR booleanexp

State 37:
## Known stack suffix:
## booleanexp AND
## LR(1) items:
booleanexp -> booleanexp AND . booleanexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On ide shift to state 32
-- On booleanexp shift to state 38
-- On arithexp shift to state 39
## Reductions:

State 38:
## Known stack suffix:
## booleanexp AND booleanexp
## LR(1) items:
booleanexp -> booleanexp . AND booleanexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> booleanexp AND booleanexp . [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> booleanexp . OR booleanexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> booleanexp AND booleanexp

State 39:
## Known stack suffix:
## arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
arithexp -> arithexp . MINUS arithexp [ TIMES PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
arithexp -> arithexp . TIMES arithexp [ TIMES PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
arithexp -> arithexp . DIVISION arithexp [ TIMES PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
booleanexp -> arithexp . EQUAL arithexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> arithexp . LESSEQUAL arithexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> arithexp . LESS arithexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> arithexp . GREATEREQUAL arithexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> arithexp . GREATER arithexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On LESSEQUAL shift to state 52
-- On LESS shift to state 54
-- On GREATEREQUAL shift to state 56
-- On GREATER shift to state 58
-- On EQUAL shift to state 60
-- On DIVISION shift to state 47
## Reductions:

State 40:
## Known stack suffix:
## arithexp TIMES
## LR(1) items:
arithexp -> arithexp TIMES . arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 51
## Reductions:

State 41:
## Known stack suffix:
## LP
## LR(1) items:
arithexp -> LP . arithexp RP [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 43
## Reductions:

State 42:
## Known stack suffix:
## ide
## LR(1) items:
arithexp -> ide . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
## Reductions:
-- On TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND
--   reduce production arithexp -> ide

State 43:
## Known stack suffix:
## LP arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES RP PLUS MINUS DIVISION ]
arithexp -> arithexp . MINUS arithexp [ TIMES RP PLUS MINUS DIVISION ]
arithexp -> arithexp . TIMES arithexp [ TIMES RP PLUS MINUS DIVISION ]
arithexp -> arithexp . DIVISION arithexp [ TIMES RP PLUS MINUS DIVISION ]
arithexp -> LP arithexp . RP [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On RP shift to state 44
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:

State 44:
## Known stack suffix:
## LP arithexp RP
## LR(1) items:
arithexp -> LP arithexp RP . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
## Reductions:
-- On TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND
--   reduce production arithexp -> LP arithexp RP

State 45:
## Known stack suffix:
## arithexp PLUS
## LR(1) items:
arithexp -> arithexp PLUS . arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## arithexp PLUS arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp PLUS arithexp . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On DIVISION shift to state 47
## Reductions:
-- On TO SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO COMMA AND
--   reduce production arithexp -> arithexp PLUS arithexp

State 47:
## Known stack suffix:
## arithexp DIVISION
## LR(1) items:
arithexp -> arithexp DIVISION . arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## arithexp DIVISION arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp DIVISION arithexp . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
## Reductions:
-- On TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND
--   reduce production arithexp -> arithexp DIVISION arithexp

State 49:
## Known stack suffix:
## arithexp MINUS
## LR(1) items:
arithexp -> arithexp MINUS . arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## arithexp MINUS arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp MINUS arithexp . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On DIVISION shift to state 47
## Reductions:
-- On TO SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO COMMA AND
--   reduce production arithexp -> arithexp MINUS arithexp

State 51:
## Known stack suffix:
## arithexp TIMES arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp TIMES arithexp . [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND ]
## Transitions:
## Reductions:
-- On TO TIMES SEMICOLON RS RP PLUS OR MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DO DIVISION COMMA AND
--   reduce production arithexp -> arithexp TIMES arithexp

State 52:
## Known stack suffix:
## arithexp LESSEQUAL
## LR(1) items:
booleanexp -> arithexp LESSEQUAL . arithexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## arithexp LESSEQUAL arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
booleanexp -> arithexp LESSEQUAL arithexp . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> arithexp LESSEQUAL arithexp

State 54:
## Known stack suffix:
## arithexp LESS
## LR(1) items:
booleanexp -> arithexp LESS . arithexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## arithexp LESS arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
booleanexp -> arithexp LESS arithexp . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> arithexp LESS arithexp

State 56:
## Known stack suffix:
## arithexp GREATEREQUAL
## LR(1) items:
booleanexp -> arithexp GREATEREQUAL . arithexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## arithexp GREATEREQUAL arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
booleanexp -> arithexp GREATEREQUAL arithexp . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> arithexp GREATEREQUAL arithexp

State 58:
## Known stack suffix:
## arithexp GREATER
## LR(1) items:
booleanexp -> arithexp GREATER . arithexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## arithexp GREATER arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
booleanexp -> arithexp GREATER arithexp . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> arithexp GREATER arithexp

State 60:
## Known stack suffix:
## arithexp EQUAL
## LR(1) items:
booleanexp -> arithexp EQUAL . arithexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## arithexp EQUAL arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . MINUS arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . TIMES arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
arithexp -> arithexp . DIVISION arithexp [ TIMES SEMICOLON RP PLUS OR MINUS DO DIVISION COMMA AND ]
booleanexp -> arithexp EQUAL arithexp . [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> arithexp EQUAL arithexp

State 62:
## Known stack suffix:
## LP arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
arithexp -> arithexp . MINUS arithexp [ TIMES RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
arithexp -> arithexp . TIMES arithexp [ TIMES RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
arithexp -> arithexp . DIVISION arithexp [ TIMES RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION ]
arithexp -> LP arithexp . RP [ TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA ]
booleanexp -> arithexp . EQUAL arithexp [ RP OR AND ]
booleanexp -> arithexp . LESSEQUAL arithexp [ RP OR AND ]
booleanexp -> arithexp . LESS arithexp [ RP OR AND ]
booleanexp -> arithexp . GREATEREQUAL arithexp [ RP OR AND ]
booleanexp -> arithexp . GREATER arithexp [ RP OR AND ]
## Transitions:
-- On TIMES shift to state 40
-- On RP shift to state 44
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On LESSEQUAL shift to state 52
-- On LESS shift to state 54
-- On GREATEREQUAL shift to state 56
-- On GREATER shift to state 58
-- On EQUAL shift to state 60
-- On DIVISION shift to state 47
## Reductions:

State 63:
## Known stack suffix:
## NOT booleanexp
## LR(1) items:
booleanexp -> NOT booleanexp . [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> booleanexp . AND booleanexp [ SEMICOLON RP OR DO COMMA AND ]
booleanexp -> booleanexp . OR booleanexp [ SEMICOLON RP OR DO COMMA AND ]
## Transitions:
## Reductions:
-- On SEMICOLON RP OR DO COMMA AND
--   reduce production booleanexp -> NOT booleanexp

State 64:
## Known stack suffix:
## separated_nonempty_list(COMMA,exp)
## LR(1) items:
loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,exp)) -> separated_nonempty_list(COMMA,exp)

State 65:
## Known stack suffix:
## miscexp
## LR(1) items:
exp -> miscexp . [ SEMICOLON RP COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RP COMMA
--   reduce production exp -> miscexp

State 66:
## Known stack suffix:
## WRITE LP loption(separated_nonempty_list(COMMA,exp))
## LR(1) items:
statement -> WRITE LP loption(separated_nonempty_list(COMMA,exp)) . RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On RP shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## WRITE LP loption(separated_nonempty_list(COMMA,exp)) RP
## LR(1) items:
statement -> WRITE LP loption(separated_nonempty_list(COMMA,exp)) RP . SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## WRITE LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON
## LR(1) items:
statement -> WRITE LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> WRITE LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON

State 69:
## Known stack suffix:
## exp
## LR(1) items:
separated_nonempty_list(COMMA,exp) -> exp . [ RP ]
separated_nonempty_list(COMMA,exp) -> exp . COMMA separated_nonempty_list(COMMA,exp) [ RP ]
## Transitions:
-- On COMMA shift to state 70
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,exp) -> exp

State 70:
## Known stack suffix:
## exp COMMA
## LR(1) items:
separated_nonempty_list(COMMA,exp) -> exp COMMA . separated_nonempty_list(COMMA,exp) [ RP ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On PSTRING shift to state 27
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On separated_nonempty_list(COMMA,exp) shift to state 71
-- On miscexp shift to state 65
-- On ide shift to state 32
-- On exp shift to state 69
-- On booleanexp shift to state 72
-- On arithexp shift to state 73
## Reductions:

State 71:
## Known stack suffix:
## exp COMMA separated_nonempty_list(COMMA,exp)
## LR(1) items:
separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp) . [ RP ]
## Transitions:
## Reductions:
-- On RP
--   reduce production separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp)

State 72:
## Known stack suffix:
## booleanexp
## LR(1) items:
booleanexp -> booleanexp . AND booleanexp [ SEMICOLON RP OR COMMA AND ]
booleanexp -> booleanexp . OR booleanexp [ SEMICOLON RP OR COMMA AND ]
exp -> booleanexp . [ SEMICOLON RP COMMA ]
## Transitions:
-- On OR shift to state 35
-- On AND shift to state 37
## Reductions:
-- On SEMICOLON RP COMMA
--   reduce production exp -> booleanexp

State 73:
## Known stack suffix:
## arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA ]
arithexp -> arithexp . MINUS arithexp [ TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA ]
arithexp -> arithexp . TIMES arithexp [ TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA ]
arithexp -> arithexp . DIVISION arithexp [ TIMES SEMICOLON RP PLUS MINUS LESSEQUAL LESS GREATEREQUAL GREATER EQUAL DIVISION COMMA ]
booleanexp -> arithexp . EQUAL arithexp [ SEMICOLON RP OR COMMA AND ]
booleanexp -> arithexp . LESSEQUAL arithexp [ SEMICOLON RP OR COMMA AND ]
booleanexp -> arithexp . LESS arithexp [ SEMICOLON RP OR COMMA AND ]
booleanexp -> arithexp . GREATEREQUAL arithexp [ SEMICOLON RP OR COMMA AND ]
booleanexp -> arithexp . GREATER arithexp [ SEMICOLON RP OR COMMA AND ]
exp -> arithexp . [ SEMICOLON RP COMMA ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On LESSEQUAL shift to state 52
-- On LESS shift to state 54
-- On GREATEREQUAL shift to state 56
-- On GREATER shift to state 58
-- On EQUAL shift to state 60
-- On DIVISION shift to state 47
## Reductions:
-- On SEMICOLON RP COMMA
--   reduce production exp -> arithexp

State 74:
## Known stack suffix:
## WHILE
## LR(1) items:
statement -> WHILE . booleanexp DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On ide shift to state 32
-- On booleanexp shift to state 75
-- On arithexp shift to state 39
## Reductions:

State 75:
## Known stack suffix:
## WHILE booleanexp
## LR(1) items:
booleanexp -> booleanexp . AND booleanexp [ OR DO AND ]
booleanexp -> booleanexp . OR booleanexp [ OR DO AND ]
statement -> WHILE booleanexp . DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On OR shift to state 35
-- On DO shift to state 76
-- On AND shift to state 37
## Reductions:

State 76:
## Known stack suffix:
## WHILE booleanexp DO
## LR(1) items:
statement -> WHILE booleanexp DO . statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On WRITE shift to state 23
-- On WHILE shift to state 74
-- On READ shift to state 77
-- On IF shift to state 86
-- On IDE shift to state 4
-- On FOR shift to state 91
-- On BEGIN shift to state 98
-- On variable shift to state 99
-- On statement shift to state 117
-- On ide shift to state 108
## Reductions:

State 77:
## Known stack suffix:
## READ
## LR(1) items:
statement -> READ . LP variable RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On LP shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## READ LP
## LR(1) items:
statement -> READ LP . variable RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On IDE shift to state 4
-- On variable shift to state 79
-- On ide shift to state 82
## Reductions:

State 79:
## Known stack suffix:
## READ LP variable
## LR(1) items:
statement -> READ LP variable . RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On RP shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## READ LP variable RP
## LR(1) items:
statement -> READ LP variable RP . SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## READ LP variable RP SEMICOLON
## LR(1) items:
statement -> READ LP variable RP SEMICOLON . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> READ LP variable RP SEMICOLON

State 82:
## Known stack suffix:
## ide
## LR(1) items:
variable -> ide . LS arithexp RS [ RP ]
variable -> ide . [ RP ]
## Transitions:
-- On LS shift to state 83
## Reductions:
-- On RP
--   reduce production variable -> ide

State 83:
## Known stack suffix:
## ide LS
## LR(1) items:
variable -> ide LS . arithexp RS [ RP ASSIGN ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## ide LS arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES RS PLUS MINUS DIVISION ]
arithexp -> arithexp . MINUS arithexp [ TIMES RS PLUS MINUS DIVISION ]
arithexp -> arithexp . TIMES arithexp [ TIMES RS PLUS MINUS DIVISION ]
arithexp -> arithexp . DIVISION arithexp [ TIMES RS PLUS MINUS DIVISION ]
variable -> ide LS arithexp . RS [ RP ASSIGN ]
## Transitions:
-- On TIMES shift to state 40
-- On RS shift to state 85
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:

State 85:
## Known stack suffix:
## ide LS arithexp RS
## LR(1) items:
variable -> ide LS arithexp RS . [ RP ASSIGN ]
## Transitions:
## Reductions:
-- On RP ASSIGN
--   reduce production variable -> ide LS arithexp RS

State 86:
## Known stack suffix:
## IF
## LR(1) items:
statement -> IF . LP booleanexp RP THEN statement ELSE statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
statement -> IF . LP booleanexp RP THEN statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On LP shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## IF LP
## LR(1) items:
statement -> IF LP . booleanexp RP THEN statement ELSE statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
statement -> IF LP . booleanexp RP THEN statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On ide shift to state 32
-- On booleanexp shift to state 88
-- On arithexp shift to state 39
## Reductions:

State 88:
## Known stack suffix:
## IF LP booleanexp
## LR(1) items:
booleanexp -> booleanexp . AND booleanexp [ RP OR AND ]
booleanexp -> booleanexp . OR booleanexp [ RP OR AND ]
statement -> IF LP booleanexp . RP THEN statement ELSE statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
statement -> IF LP booleanexp . RP THEN statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On RP shift to state 89
-- On OR shift to state 35
-- On AND shift to state 37
## Reductions:

State 89:
## Known stack suffix:
## IF LP booleanexp RP
## LR(1) items:
statement -> IF LP booleanexp RP . THEN statement ELSE statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
statement -> IF LP booleanexp RP . THEN statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On THEN shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## IF LP booleanexp RP THEN
## LR(1) items:
statement -> IF LP booleanexp RP THEN . statement ELSE statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
statement -> IF LP booleanexp RP THEN . statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On WRITE shift to state 23
-- On WHILE shift to state 74
-- On READ shift to state 77
-- On IF shift to state 86
-- On IDE shift to state 4
-- On FOR shift to state 91
-- On BEGIN shift to state 98
-- On variable shift to state 99
-- On statement shift to state 114
-- On ide shift to state 108
## Reductions:

State 91:
## Known stack suffix:
## FOR
## LR(1) items:
statement -> FOR . ide ASSIGN arithexp TO arithexp DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On IDE shift to state 4
-- On ide shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## FOR ide
## LR(1) items:
statement -> FOR ide . ASSIGN arithexp TO arithexp DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On ASSIGN shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## FOR ide ASSIGN
## LR(1) items:
statement -> FOR ide ASSIGN . arithexp TO arithexp DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## FOR ide ASSIGN arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TO TIMES PLUS MINUS DIVISION ]
arithexp -> arithexp . MINUS arithexp [ TO TIMES PLUS MINUS DIVISION ]
arithexp -> arithexp . TIMES arithexp [ TO TIMES PLUS MINUS DIVISION ]
arithexp -> arithexp . DIVISION arithexp [ TO TIMES PLUS MINUS DIVISION ]
statement -> FOR ide ASSIGN arithexp . TO arithexp DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On TO shift to state 95
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DIVISION shift to state 47
## Reductions:

State 95:
## Known stack suffix:
## FOR ide ASSIGN arithexp TO
## LR(1) items:
statement -> FOR ide ASSIGN arithexp TO . arithexp DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On REAL shift to state 26
-- On LP shift to state 41
-- On INT shift to state 30
-- On IDE shift to state 4
-- On ide shift to state 42
-- On arithexp shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## FOR ide ASSIGN arithexp TO arithexp
## LR(1) items:
arithexp -> arithexp . PLUS arithexp [ TIMES PLUS MINUS DO DIVISION ]
arithexp -> arithexp . MINUS arithexp [ TIMES PLUS MINUS DO DIVISION ]
arithexp -> arithexp . TIMES arithexp [ TIMES PLUS MINUS DO DIVISION ]
arithexp -> arithexp . DIVISION arithexp [ TIMES PLUS MINUS DO DIVISION ]
statement -> FOR ide ASSIGN arithexp TO arithexp . DO statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On TIMES shift to state 40
-- On PLUS shift to state 45
-- On MINUS shift to state 49
-- On DO shift to state 97
-- On DIVISION shift to state 47
## Reductions:

State 97:
## Known stack suffix:
## FOR ide ASSIGN arithexp TO arithexp DO
## LR(1) items:
statement -> FOR ide ASSIGN arithexp TO arithexp DO . statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On WRITE shift to state 23
-- On WHILE shift to state 74
-- On READ shift to state 77
-- On IF shift to state 86
-- On IDE shift to state 4
-- On FOR shift to state 91
-- On BEGIN shift to state 98
-- On variable shift to state 99
-- On statement shift to state 113
-- On ide shift to state 108
## Reductions:

State 98:
## Known stack suffix:
## BEGIN
## LR(1) items:
statement -> BEGIN . statement_list END SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On WRITE shift to state 23
-- On WHILE shift to state 74
-- On READ shift to state 77
-- On IF shift to state 86
-- On IDE shift to state 4
-- On FOR shift to state 91
-- On BEGIN shift to state 98
-- On variable shift to state 99
-- On statement_list shift to state 103
-- On statement shift to state 106
-- On ide shift to state 108
## Reductions:

State 99:
## Known stack suffix:
## variable
## LR(1) items:
statement -> variable . ASSIGN exp SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On ASSIGN shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## variable ASSIGN
## LR(1) items:
statement -> variable ASSIGN . exp SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On PSTRING shift to state 27
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On miscexp shift to state 65
-- On ide shift to state 32
-- On exp shift to state 101
-- On booleanexp shift to state 72
-- On arithexp shift to state 73
## Reductions:

State 101:
## Known stack suffix:
## variable ASSIGN exp
## LR(1) items:
statement -> variable ASSIGN exp . SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## variable ASSIGN exp SEMICOLON
## LR(1) items:
statement -> variable ASSIGN exp SEMICOLON . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> variable ASSIGN exp SEMICOLON

State 103:
## Known stack suffix:
## BEGIN statement_list
## LR(1) items:
statement -> BEGIN statement_list . END SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On END shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## BEGIN statement_list END
## LR(1) items:
statement -> BEGIN statement_list END . SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## BEGIN statement_list END SEMICOLON
## LR(1) items:
statement -> BEGIN statement_list END SEMICOLON . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> BEGIN statement_list END SEMICOLON

State 106:
## Known stack suffix:
## statement
## LR(1) items:
statement_list -> statement . [ END ]
statement_list -> statement . statement_list [ END ]
## Transitions:
-- On WRITE shift to state 23
-- On WHILE shift to state 74
-- On READ shift to state 77
-- On IF shift to state 86
-- On IDE shift to state 4
-- On FOR shift to state 91
-- On BEGIN shift to state 98
-- On variable shift to state 99
-- On statement_list shift to state 107
-- On statement shift to state 106
-- On ide shift to state 108
## Reductions:
-- On END
--   reduce production statement_list -> statement

State 107:
## Known stack suffix:
## statement statement_list
## LR(1) items:
statement_list -> statement statement_list . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production statement_list -> statement statement_list

State 108:
## Known stack suffix:
## ide
## LR(1) items:
statement -> ide . LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
variable -> ide . LS arithexp RS [ ASSIGN ]
variable -> ide . [ ASSIGN ]
## Transitions:
-- On LS shift to state 83
-- On LP shift to state 109
## Reductions:
-- On ASSIGN
--   reduce production variable -> ide

State 109:
## Known stack suffix:
## ide LP
## LR(1) items:
statement -> ide LP . loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On TRUE shift to state 25
-- On REAL shift to state 26
-- On PSTRING shift to state 27
-- On NOT shift to state 28
-- On LP shift to state 29
-- On INT shift to state 30
-- On IDE shift to state 4
-- On FALSE shift to state 31
-- On separated_nonempty_list(COMMA,exp) shift to state 64
-- On miscexp shift to state 65
-- On loption(separated_nonempty_list(COMMA,exp)) shift to state 110
-- On ide shift to state 32
-- On exp shift to state 69
-- On booleanexp shift to state 72
-- On arithexp shift to state 73
## Reductions:
-- On RP
--   reduce production loption(separated_nonempty_list(COMMA,exp)) ->

State 110:
## Known stack suffix:
## ide LP loption(separated_nonempty_list(COMMA,exp))
## LR(1) items:
statement -> ide LP loption(separated_nonempty_list(COMMA,exp)) . RP SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On RP shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## ide LP loption(separated_nonempty_list(COMMA,exp)) RP
## LR(1) items:
statement -> ide LP loption(separated_nonempty_list(COMMA,exp)) RP . SEMICOLON [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On SEMICOLON shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## ide LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON
## LR(1) items:
statement -> ide LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> ide LP loption(separated_nonempty_list(COMMA,exp)) RP SEMICOLON

State 113:
## Known stack suffix:
## FOR ide ASSIGN arithexp TO arithexp DO statement
## LR(1) items:
statement -> FOR ide ASSIGN arithexp TO arithexp DO statement . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> FOR ide ASSIGN arithexp TO arithexp DO statement

State 114:
## Known stack suffix:
## IF LP booleanexp RP THEN statement
## LR(1) items:
statement -> IF LP booleanexp RP THEN statement . ELSE statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
statement -> IF LP booleanexp RP THEN statement . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On ELSE shift to state 115
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END BEGIN
--   reduce production statement -> IF LP booleanexp RP THEN statement

State 115:
## Known stack suffix:
## IF LP booleanexp RP THEN statement ELSE
## LR(1) items:
statement -> IF LP booleanexp RP THEN statement ELSE . statement [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
-- On WRITE shift to state 23
-- On WHILE shift to state 74
-- On READ shift to state 77
-- On IF shift to state 86
-- On IDE shift to state 4
-- On FOR shift to state 91
-- On BEGIN shift to state 98
-- On variable shift to state 99
-- On statement shift to state 116
-- On ide shift to state 108
## Reductions:

State 116:
## Known stack suffix:
## IF LP booleanexp RP THEN statement ELSE statement
## LR(1) items:
statement -> IF LP booleanexp RP THEN statement ELSE statement . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> IF LP booleanexp RP THEN statement ELSE statement

State 117:
## Known stack suffix:
## WHILE booleanexp DO statement
## LR(1) items:
statement -> WHILE booleanexp DO statement . [ WRITE WHILE READ IF IDE FOR END ELSE BEGIN ]
## Transitions:
## Reductions:
-- On WRITE WHILE READ IF IDE FOR END ELSE BEGIN
--   reduce production statement -> WHILE booleanexp DO statement

State 118:
## Known stack suffix:
## BEGIN statement_list
## LR(1) items:
statement_part -> BEGIN statement_list . END DOT [ EOF ]
## Transitions:
-- On END shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## BEGIN statement_list END
## LR(1) items:
statement_part -> BEGIN statement_list END . DOT [ EOF ]
## Transitions:
-- On DOT shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## BEGIN statement_list END DOT
## LR(1) items:
statement_part -> BEGIN statement_list END DOT . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production statement_part -> BEGIN statement_list END DOT

State 121:
## Known stack suffix:
## opt_variable_declaration_list statement_part
## LR(1) items:
block -> opt_variable_declaration_list statement_part . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production block -> opt_variable_declaration_list statement_part

State 122:
## Known stack suffix:
## PROGRAM PSTRING block
## LR(1) items:
program -> PROGRAM PSTRING block . EOF [ # ]
## Transitions:
-- On EOF shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## PROGRAM PSTRING block EOF
## LR(1) items:
program -> PROGRAM PSTRING block EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> PROGRAM PSTRING block EOF

State 124:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

